/**
👑 Q U E E N - A N Y A - M D - #v2

🔗 Dev: https://wa.me/918811074852 (@PikaBotz)
🔗 Team: Tᴇᴄʜ Nɪɴᴊᴀ Cʏʙᴇʀ Sϙᴜᴀᴅꜱ (𝚻.𝚴.𝐂.𝐒) 🚀📌 (under @P.B.inc)

📜 GNU GENERAL PUBLIC LICENSE
Version 3, 29 June 2007

📌 Permission & Copyright:
If you're using any of these codes, please ask for permission or mention https://github.com/PikaBotz/Anya_v2-MD in your repository.

⚠️ Warning:
- This bot is not an officially certified WhatsApp bot.
- Report any bugs or glitches to the developer.
- Seek permission from the developer to use any of these codes.
- This bot does not store user's personal data.
- Certain files in this project are private and not publicly available for edit/read (encrypted).
- The repository does not contain any misleading content.
- The developer has not copied code from repositories they don't own. If you find matching code, please contact the developer.

Contact: alammdarif07@gmail.com (for reporting bugs & permission)
          https://wa.me/918811074852 (to contact on WhatsApp)

🚀 Thank you for using Queen Anya MD v2! 🚀
**/

exports.cmdName = () => ({
  name: ['fullpic2'],
  alias: ['fulpic2','fullpicture2'],
  category: "imgmaker",
  desc: "Convert any image ratio into 1:1 with blur background."
});

/**
 * ⚠️ Strictly under copyright by @PikaBotz
 **/
exports.getCommand = async (anyaV2, pika, prefix, command) => {
  const Config = require("../../config");
  const quoted = pika.quoted ? pika.quoted : pika;
  const mime = (quoted.msg || quoted).mimetype || "";
  if (!/image/.test(mime)) return pika.reply(`Please tag an image or send an image with caption *${prefix + command}*`);
  await pika.react("🌀");
  const setBlur = 10; //~ You can set the blur intensity of background image.
  const path = require("path");
  const Jimp = require("jimp");
  const fs = require("fs").promises;
  const proceed = await anyaV2.sendMessage(pika.chat, { text: Config.message.wait }, { quoted: pika });
  const imageBuffer = await quoted.download();
  const mName = await getRandomName(5) + '.jpg';
  const pathOut = path.join(__dirname, '..', 'database', 'trash', mName);

  async function cropAndBlurMedia(imageBuffer, pathOut) {
    return new Promise(async (resolve, reject) => {
      try {
        const image = await Jimp.read(imageBuffer);
        const inputWidth = image.getWidth();
        const inputHeight = image.getHeight();
        const x = Math.max(0, (inputWidth - inputHeight) / 2);
        const y = Math.max(0, (inputHeight - inputWidth) / 2);
        const size = Math.min(inputWidth, inputHeight);
        const squareImage = image.clone().crop(x, y, size, size);
        squareImage.blur(setBlur);
        await squareImage.writeAsync(pathOut);
        pika.delete(proceed.key);
        resolve(true);
        } catch (error) {
        console.log(error);
        pika.edit("❌ Can't proceed this media, please choose another.", proceed.key);
        reject(false);
      }
    });
  }

  async function pasteMedia(imageBuffer, pathOut) {
    return new Promise(async (resolve, reject) => {
      try {
        const editedImage = await Jimp.read(pathOut);
        const inputWidth = editedImage.getWidth();
        const inputHeight = editedImage.getHeight();
        const pasteImage = await Jimp.read(imageBuffer);
        const zoomFactor = Math.min(inputWidth / pasteImage.getWidth(), inputHeight / pasteImage.getHeight());
        pasteImage.resize(pasteImage.getWidth() * zoomFactor, Jimp.AUTO);
        const x = (inputWidth - pasteImage.getWidth()) / 2;
        const y = (inputHeight - pasteImage.getHeight()) / 2;
        editedImage.composite(pasteImage, x, y);
        await editedImage.writeAsync(pathOut);
        const editedMedia = await fs.readFile(pathOut);
        await anyaV2.sendMessage(pika.chat, {
          image: editedMedia,
          caption: `_© Generated by ${Config.botname}_`
        }, { quoted: pika });
        await fs.unlink(pathOut);
        resolve(true);
      } catch (error) {
        console.error('Error:', error);
        reject(false);
      }
    });
  }

  cropAndBlurMedia(imageBuffer, pathOut)
    .then((result) => {
      if (result) {
        return pasteMedia(imageBuffer, pathOut);
      } else {
        throw new Error('Failed to process and paste media.');
      }
    })
    .then((pasteResult) => {
    })
    .catch((error) => {
      console.error(error);
      pika.reply(Config.message.error);
    });
};

async function getRandomName(length) {
  const alphabet = 'abcdefghijklmnopqrstuvwxyz';
  let name = '';
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * alphabet.length);
    name += alphabet[randomIndex];
  }
  return name;
};
